
* Org listcruncher

  # Note: The export of the org link with
  # file:https://travis....?branch=master fails to be recognized and
  # converted to a markdown image link. So I insert this directly.
  #+BEGIN_EXPORT md
  [![img](https://travis-ci.org/dfeich/org-listcruncher.svg?branch=master)](https://travis-ci.org/dfeich/org-listcruncher)
  [![img](https://melpa.org/packages/org-listcruncher-badge.svg)](https://melpa.org/#/org-listcruncher)
  #+END_EXPORT

  org-listcruncher provides a way to convert org-mode lists into
  a table structure following specific semantics. 

** Installation

   You can get the package from [[https://melpa.org/#/org-listcruncher][MELPA]] using emacs' package manager.

   If you are using John Wiegley's =use-package= (which I recommend), just put the following line
   into your =~/emacs.d/init.el= (or =~/.emacs=)
   #+BEGIN_SRC elisp
     (use-package org-listcruncher)
   #+END_SRC

   Or more barebones, just =require= it.
   #+BEGIN_SRC elisp
     (require 'org-listcruncher)
   #+END_SRC

** Example usage

   Write a planning list and give it a name using the appropriate Org syntax (e.g. =#+NAME: lstTest=).
   Here is an example

   #+NAME: lstTest
   - *item:* item X modified by replacing values (amount: 15, recurrence: 1, end-year: 2020)
     - modification of item X (amount: 20)
     - another modification of item X (other: 500)
       - modification of the modification (other: 299)
   - illustrating inheritance (recurrence: 2, end-year: 2024)
     - *item:* item A. Some longer explanation that may run over
       multiple lines (amount: 10)
     - *item:* item B (amount: 20)
     - *item:* item C (amount: 30)
       - a modification to item C (amount: 25, recurrence: 3)
   - *item:* item Y modified by operations (amount: 50, recurrence: 4, end-year: 2026)
     - modification by an operation (amount: +50)
     - modification by an operation (amount: *1.5)
   - *item:* item Z entered in scientific format (amount: 1e3, recurrence: 3, end-year: 2025)
     - modification by an operation (amount: -1e2)

   We can use org-listcruncher to convert this list into a table   

   #+NAME: src-example1
   #+BEGIN_SRC elisp :results value :var listname="lstTest" :exports both
     (org-listcruncher-to-table listname)
   #+END_SRC

   #+RESULTS: src-example1
   | description                         | other | amount | recurrence | end-year |
   |-------------------------------------+-------+--------+------------+----------|
   | item X modified by replacing values |   299 |     20 |          1 |     2020 |
   | item A                              |       |     10 |          2 |     2024 |
   | item B                              |       |     20 |          2 |     2024 |
   | item C                              |       |     25 |          3 |     2024 |
   | item Y modified by operations       |       |  150.0 |          4 |     2026 |
   | item Z entered in scientific format |       |  900.0 |          3 |     2025 |


   We can also provide an additional argument to affect the order of
   columns in which the table is produced.
   #+BEGIN_SRC elisp :results value :var listname="lstTest" :exports both
     (org-listcruncher-to-table listname :order '("description" "amount" "recurrence"))
   #+END_SRC

   #+RESULTS:
   | description                         | amount | recurrence | other | end-year |
   |-------------------------------------+--------+------------+-------+----------|
   | item X modified by replacing values |     20 |          1 |   299 |     2020 |
   | item A                              |     10 |          2 |       |     2024 |
   | item B                              |     20 |          2 |       |     2024 |
   | item C                              |     25 |          3 |       |     2024 |
   | item Y modified by operations       |  150.0 |          4 |       |     2026 |
   | item Z entered in scientific format |  900.0 |          3 |       |     2025 |



   It is also possible to directly obtain single table field values based on defining the
   row and column through the string corresponding to an item's description and its
   column name:
   
   #+BEGIN_SRC elisp :results value :var listname="lstTest" :exports both
     (org-listcruncher-get-field listname "item B" "amount")
   #+END_SRC

   #+RESULTS:
   : 20

   
** List writing rules
   
   The rules for writing such a planning list are
   1. Each line contains a tag defining whether the line will become a table row. For this
      example I defined this as the string "item:". Rows without such a tag just serve as
      metadata.
   2. A string following the output tag "item:" is taken as the description of the table row.
   3. Each line can contain any number of key/value pairs in parentheses in the form
       =(key1: val1, key2: val2, ...)=
   4. Lines of lower hierarchical order in the list inherit their default settings for key/values
      from the upper items.
   5. The key value of a higher order item can be overwritten by a new new value for the same key
      in a lower order line.
   6. If a given value is of the form +10, -10, /10, *10, i.e. an operator followed by a number,
      the operation is carried out on the previous value of the respective key.


** Using alternate parsing functions
   You can define arbitrary parsing functions for the list items. They must
   obey the following API:

   The function receives a list item (a string) as its single
   argument. It must return a list (=OUTP, DESCR, VARLST=), where
   - =OUTP= is a boolean indicating whether this list item will become a table
     row
   - =DESCR= is the description string appearing in the table's "description" column
     (so this is only relevant for OUTP=True lines)
   - =VARLST= is the list of key/value pairs corresponding to the column name /
     values.

   Simple example functions for this purpose can be generated using
   the =org-listcruncher-mk-parseitem-default= generator function. It
   just allows modifying the tag that decides whether a list item will
   become a table row. E.g. if I would like to match for "row:"
   instead for "item:", and if I would like to use square brackets, I
   can obtain such a function by executing

   #+BEGIN_SRC elisp :exports source
     (org-listcruncher-mk-parseitem-default :tag"\\*?row:\\*?" :bra "[" :ket "]")
   #+END_SRC

   Let's test it using this modified list:
      
   #+NAME: lstTest2
   - *row:* item X modified by replacing values [amount: 15, recurrence: 1, end-year: 2020].
     - modification of item X [amount: 20]
     - another modification of item X [other: 500]
       - modification of the modification [other: 299]
   - illustrating inheritance [recurrence: 2, end-year: 2024]
     - *row:* item A. Some longer explanation that may run over
       multiple lines [amount: 10]
     - *row:* item B [amount: 20]
     - *row:* item C [amount: 30]
       - a modification to item C [amount: 25, recurrence: 3]
   - *row:* item Y modified by operations [amount: 50, recurrence: 4, end-year: 2026]
     - modification by an operation [amount: +50]
     - modification by an operation [amount: *1.5]
   - *row:* item Z entered in scientific format [amount: 1e3, recurrence: 3, end-year: 2025]
     - modification by an operation [amount: -1e2]

   We invoke org-listcruncher with the above parsing function:
       
   #+NAME: src-example2
   #+BEGIN_SRC elisp :results value :var listname="lstTest2" :exports both
     (org-listcruncher-to-table listname
				:parsefn (org-listcruncher-mk-parseitem-default
					  :tag "\\*?row:\\*?"
					  :bra "["
					  :ket "]")
				:order '("description" "amount" "recurrence"))
   #+END_SRC

   #+RESULTS: src-example2
   | description                         | amount | recurrence | other | end-year |
   |-------------------------------------+--------+------------+-------+----------|
   | item X modified by replacing values |     20 |          1 |   299 |     2020 |
   | item A                              |     10 |          2 |       |     2024 |
   | item B                              |     20 |          2 |       |     2024 |
   | item C                              |     25 |          3 |       |     2024 |
   | item Y modified by operations       |  150.0 |          4 |       |     2026 |
   | item Z entered in scientific format |  900.0 |          3 |       |     2025 |
   
** Configuration
   The way that the table structure is created from the list can be
   customized by providing own implementations of the parsing function
   and of the consolidation function that combines the parsed
   key/value pairs into a table.

   The current implementations are examples that are sufficient for
   the above use cases.

   One can easily imagine much more sophisticated parsing
   functions which e.g. could be applied to a cooking recipe written
   with minimal concessions as to syntax. From such a recipe one could
   then derive a table of ingredients, their amounts, and cooking
   times; all ready for being displayed as a table, to calculate the
   adapted amounts according to the number of expected guests, and
   entering the items onto your shopping list.

   I am planning to provide more sophisticated parsing and
   consolidation functions to choose from (and naturally would be
   happy to receive any additions from contributors).

   The default functions that are used can be configured using
   the following customization variables.

   - =org-listcruncher-parse-fn= :: This variable defines the
	default parsing function to use if you call the
	org-listcruncher functions without an explicit =:parsefn=
	keyword agument.

   - org-listcruncher-consolidate-fn :: This variable defines the
        default consolidation function. The function must accept two
        arguments: KEY and LIST. KEY is the key (i.e. column value) of
        this row that one is interested in. LIST contains all the
        values for the KEY in that row, i.e. it will contain any
        redefinitions of the key value in subitems of this list
        item. The consolidation function basically defines how these
        values get combined into the single value that we will assign
        to the column in this row. The default function either
        replaces the previous value or allows values with operators
        (e.g. +10, *0.5) to modify the previous value. Refer to the
        default function =org-listcruncher-consolidate-default=
        documentation.

** Changes
*** version 1.0: API change
    I apologize for a backwards incompatible API change for
    =org-listcruncher-to-table listname= and
    =org-listcruncher-get-field listname=, which now both accept
    keyword parameters. This will make the functions more future proof
    when further function arguments need to be introduced.
   
** Tests                                                           :noexport:

   A look at the main heavy lifting function and its return values:
   #+BEGIN_SRC elisp :results output :var listname="lstTest"
     (pp (org-listcruncher--parselist (save-excursion
				       (goto-char (point-min))
				       (unless (search-forward-regexp (concat  "^ *#\\\+NAME: .*" listname) nil t)
					 (error "No list of this name found: %s" listname))
				       (forward-line 1)
				       (org-list-to-lisp))
				     org-listcruncher-parse-fn
				     nil
				     nil))
   #+END_SRC

   #+RESULTS:
   #+begin_example
   ((("amount" "-1e2")
     ("amount" "1e3")
     ("recurrence" "3")
     ("end-year" "2025")
     ("amount" "*1.5")
     ("amount" "+50")
     ("amount" "50")
     ("recurrence" "4")
     ("end-year" "2026")
     ("amount" "25")
     ("recurrence" "3")
     ("amount" "30")
     ("amount" "20")
     ("amount" "10")
     ("recurrence" "2")
     ("end-year" "2024")
     ("other" "299")
     ("other" "500")
     ("amount" "20")
     ("amount" "15")
     ("recurrence" "1")
     ("end-year" "2020"))
    ((("description" "item X modified by replacing values")
      ("other" "299")
      ("other" "500")
      ("amount" "20")
      ("amount" "15")
      ("recurrence" "1")
      ("end-year" "2020"))
     (("description" "item A")
      ("amount" "10")
      ("recurrence" "2")
      ("end-year" "2024"))
     (("description" "item B")
      ("amount" "20")
      ("recurrence" "2")
      ("end-year" "2024"))
     (("description" "item C")
      ("amount" "25")
      ("recurrence" "3")
      ("amount" "30")
      ("recurrence" "2")
      ("end-year" "2024"))
     (("description" "item Y modified by operations")
      ("amount" "*1.5")
      ("amount" "+50")
      ("amount" "50")
      ("recurrence" "4")
      ("end-year" "2026"))
     (("description" "item Z entered in scientific format")
      ("amount" "-1e2")
      ("amount" "1e3")
      ("recurrence" "3")
      ("end-year" "2025"))))
   #+end_example



* Tests integrating with orgbabelhelper                            :noexport:

  
  #+BEGIN_SRC python :results output raw drawer :var tbl=src-example1 :colnames no
    import orgbabelhelper as obh

    df = obh.orgtable_to_dataframe(tbl, index="description")
    print(obh.dataframe_to_orgtable(df, caption="Example 1"))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  #+CAPTION: Example 1
  |description|other|amount|recurrence|end-year|
  |-----
  |item X modified by replacing values|299|20|1|2020|
  |item A||10|2|2024|
  |item B||20|2|2024|
  |item C||25|3|2024|
  |item Y modified by operations||150.0|4|2026|
  |item Z entered in scientific format||900.0|3|2025|

  :END:

* COMMENT Org Babel settings
Local variables:
org-confirm-babel-evaluate: nil
End:

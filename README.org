
* Org listcruncher

  org-listcruncher provides a way to convert org-mode lists into
  a table structure following specific semantics.

  This is currently still in the initial development. As soon as I have completed the
  main features, I will submit ist as a MELPA package.

  If you want to test it already, just clone this repository, make sure that it is
  in your emacs search path and load the package using

  #+BEGIN_SRC elisp
  (require 'org-listcruncher)
  #+END_SRC

** Example usage

   Write a planning list and give it a name using the appropriate Org syntax (e.g. =#+NAME: lsttest=).
   Here is an example

   #+NAME: lsttest
   - item: First item (kCHF: 15, recurrence: 1, until: 2020)
     - modification of the first item (kCHF: 20)
     - another modification of the first item (other: 500)
       - modification of the modification (other: 299)
   - item: second item (kCHF: 50, recurrence: 4)
   - category (recurrence: 5)
     - item: a category item A (kCHF: 10)
     - item: a category item B (kCHF: 20)
     - item: a category item C (kCHF: 30)
       - a modification to category item C (kCHF: 25, recurrence: 3)

   The rules for writing such a planning list are
   1. Each line contains a tag defining wheter the line will become a table row. For this
      example I defined this as the string "item:". Rows without such a tag just serve as
      metadata.
   2. A string following the output tag "item:" is taken as the description of the table row.
   3. Each line can contain any number of key/value pairs in parentheses in the form
       =(key1: val1, key2: val2, ...)=
   4. Lines of lower hierarchical order in the list inherit their default settings for key/values
      from the upper items.
   5. The key value of a higher order item can be overwritten by a new new value for the same key
      in a lower order line.

   Now we can use org-listcruncher to convert this list into a table   

   #+NAME: src-example1
   #+BEGIN_SRC elisp :results value :var lname="lsttest" :exports both
     (org-listcruncher-to-table lname)
   #+END_SRC

   #+RESULTS: src-example1
   | description       | other | kCHF | recurrence | until |
   |-------------------+-------+------+------------+-------|
   | First item        |   299 |   20 |          1 |  2020 |
   | second item       |       |   50 |          4 |       |
   | a category item A |       |   10 |          5 |       |
   | a category item B |       |   20 |          5 |       |
   | a category item C |       |   25 |          3 |       |


   We can also provide an additional argument to affect the order in which the table is rendered.
   #+BEGIN_SRC elisp :results value :var lname="lsttest" :exports both
     (org-listcruncher-to-table lname '("description" "kCHF" "recurrence"))
   #+END_SRC

   #+RESULTS:
   | description       | kCHF | recurrence | other | until |
   |-------------------+------+------------+-------+-------|
   | First item        |   20 |          1 |   299 |  2020 |
   | second item       |   50 |          4 |       |       |
   | a category item A |   10 |          5 |       |       |
   | a category item B |   20 |          5 |       |       |
   | a category item C |   25 |          3 |       |       |


  
** Tests                                                           :noexport:

   A look at the main heavy lifting function and its return values:
   #+BEGIN_SRC elisp :results output :var lname="lsttest"
     (pp (org-listcruncher--parselist (save-excursion
				       (goto-char (point-min))
				       (unless (search-forward-regexp (concat  "^ *#\\\+NAME: .*" lname) nil t)
					 (error "No list of this name found: %s" lname))
				       (forward-line 1)
				       (org-list-to-lisp))
				     nil
				     nil))
   #+END_SRC

   #+RESULTS:
   #+begin_example
   ((("kCHF" "25")
     ("recurrence" "3")
     ("kCHF" "30")
     ("kCHF" "20")
     ("kCHF" "10")
     ("recurrence" "5")
     ("kCHF" "50")
     ("recurrence" "4")
     ("other" "299")
     ("other" "500")
     ("kCHF" "20")
     ("kCHF" "15")
     ("recurrence" "1")
     ("until" "2020"))
    ((("description" "First item ")
      ("other" "299")
      ("other" "500")
      ("kCHF" "20")
      ("kCHF" "15")
      ("recurrence" "1")
      ("until" "2020"))
     (("description" "second item ")
      ("kCHF" "50")
      ("recurrence" "4"))
     (("description" "a category item A ")
      ("kCHF" "10")
      ("recurrence" "5"))
     (("description" "a category item B ")
      ("kCHF" "20")
      ("recurrence" "5"))
     (("description" "a category item C ")
      ("kCHF" "25")
      ("recurrence" "3")
      ("kCHF" "30")
      ("recurrence" "5"))))
   #+end_example



* Tests integrating with orgbabelhelper                            :noexport:

  
  #+BEGIN_SRC python :results output raw drawer :var tbl=src-example1 :colnames no
    import orgbabelhelper as obh

    df = obh.orgtable_to_dataframe(tbl, index="descr")
    print(obh.dataframe_to_orgtable(df, caption="Example 1"))
  #+END_SRC

  #+RESULTS:
  :RESULTS:
  #+CAPTION: Example 1
  ||description|other|kCHF|recurrence|until|
  |-----
  |1|First item |299|20|1|2020|
  |2|second item ||50|4||
  |3|a category item A ||10|5||
  |4|a category item B ||20|5||
  |5|a category item C ||25|3||

  :END:

* COMMENT Org Babel settings
Local variables:
org-confirm-babel-evaluate: nil
End:
